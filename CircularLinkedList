package com.app.CircularLinkedList;

public class Node {
     private int data;
     private Node next;
	
     
     //parameterized constructor
     public Node(int data) {
 		super();
 		this.data = data;
 		next=null;
 	}

   //getter and setter
     
	public int getData() {
		return data;
	}


	public void setData(int data) {
		this.data = data;
	}


	public Node getNext() {
		return next;
	}


	public void setNext(Node next) {
		this.next = next;
	}
     
     
     
}

package com.app.CircularLinkedList;

public class CircularLinkedList {
	private Node head;

	// default constructor
	public CircularLinkedList() {
		head = null;
	}

	// insert by value
	public boolean insertbyval(int data) {
		// create new node
		Node newNode = new Node(data);
		// check node is empty or not
		if (newNode == null) {
			return false;
		}
		// check head is null
		if (head == null) {
			newNode.setNext(head);
			head = newNode;

			return true;
		}
		// add last to list
		Node temp = head;
		// traversing to last
		while (temp != head) {
			temp = temp.getNext();
			if (temp == null) {
				return false;
			}
		}
		temp.setNext(newNode);
		newNode.setNext(head);
		return true;

	}

	// insert by position
	public boolean insertbyPos(int data, int position) {
		// create a new node
		Node newNode = new Node(data);

		if (newNode == null) {
			return false;
		}
		// insert at first
		if (position == 1) {
			if (head == null) {
				newNode.setNext(head);
				head = newNode;
			}
			newNode.setNext(head);
			head.setNext(newNode);
			return true;
		}
		// insert at last
		Node last = head;
		while (last.getNext() != head) {
			last = last.getNext();
			if (last == null) {
				return false;
			}

			last.setNext(newNode);
			newNode.setNext(head);
			return true;
		}

		// check for position
		Node prev = head;
		for (int i = 1; i < position - 1; i++) {
			prev = prev.getNext();
			if (prev == null) {
				return false;
			}
		}
		newNode.setNext(prev.getNext());
		prev.setNext(newNode);
		return true;

	}
	
	

	// display
	public void display() {
		if (head == null) {
			return;
		}
		Node temp = head;
		do {
			System.out.print(temp.getData() + " ");
			temp = temp.getNext();
		} while (temp != head);
		System.out.println();
	}

}

package com.app.CircularLinkedList;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		try(Scanner sc=new Scanner(System.in)){
	 
		CircularLinkedList cll=new CircularLinkedList();
		boolean exit=false;
		while(exit!=true) {
			System.out.println("Options:1.insert 2.insert by position 3.display 4.exit");
			int choice=sc.nextInt();
			try {
				switch(choice)
				{
				case 1:
					   System.out.println("enter the elements:");
					   cll.insertbyval(sc.nextInt());
					   break;
				case 2:
					  System.out.println("enter the element and position:");
					  cll.insertbyPos(sc.nextInt(), sc.nextInt());
					  break;
				case 3:
					  cll.display();
					  break;
				case 4:
					 exit=true;
					 break;
				}
				
				
			} catch (Exception e) {
				System.out.println(e);
			}
		}
	}

}
	}
